from fpdf import FPDF
import socket
from scapy.all import *


# Function to perform network scan and detect active hosts
def scan_network(network_prefix):
    active_hosts = []
    arp_request = Ether(dst="ff:ff:ff:ff:ff:ff") / ARP(pdst=network_prefix)
    answered_list = srp(arp_request, timeout=1, verbose=False)[0]
    for element in answered_list:
        active_hosts.append(element[1].psrc)
    return active_hosts


# Function to test if a host is active
def test_host(host):
    ports_to_test = [135, 80]  # Example list of ports to test
    for port in ports_to_test:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((host, port))
        sock.close()
        if result == 0:
            return True
    return False


# Placeholder functions for fetching CVE details from APIs
def search_nvd_cve(cve_id):
    # Implement function to fetch CVE details from NVD API
    pass


def search_jvn_cve(cve_id):
    # Implement function to fetch CVE details from JVN API
    pass


# Function to fetch CVE details from multiple sources
def get_cve_details(cve_id):
    cve_details = []

    # Fetch from NVD
    nvd_data = search_nvd_cve(cve_id)
    if nvd_data:
        nvd_description = \
        nvd_data.get("result", {}).get("CVE_Items", [])[0].get("cve", {}).get("description", {}).get("description_data",
                                                                                                     [])[0].get("value")
        cve_details.append({"source": "NVD", "description": nvd_description})

    # Fetch from JVN
    jvn_data = search_jvn_cve(cve_id)
    if jvn_data:
        jvn_description = jvn_data.get("description", "")
        cve_details.append({"source": "JVN", "description": jvn_description})

    # Add more API fetches similarly

    return cve_details


# Function to generate PDF report per host
def generate_pdf_report(active_hosts, vulnerabilities_per_host):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    pdf.cell(200, 10, txt="Vulnerability Report", ln=True, align='C')

    for host, vulnerabilities in vulnerabilities_per_host.items():
        pdf.cell(200, 10, txt=f"\nHost: {host}", ln=True, align='L')
        if vulnerabilities:
            for index, vuln in enumerate(vulnerabilities, start=1):
                pdf.cell(200, 10, txt=f"Vulnerability {index}:", ln=True, align='L')
                pdf.cell(200, 10, txt=f"Source: {vuln['source']}", ln=True, align='L')
                pdf.multi_cell(200, 10, txt=f"Description: {vuln['description']}", align='L')
        else:
            pdf.cell(200, 10, txt="No vulnerabilities detected.", ln=True, align='L')

    pdf.output("detailed_vulnerability_report.pdf")


if __name__ == "__main__":
    network_prefix = input("Enter the network prefix (e.g., 192.168.1.0/24): ")
    active_hosts = scan_network(network_prefix)
    print("\nActive Hosts:")
    for index, host in enumerate(active_hosts, start=1):
        print(f"{index}. {host}")

    vulnerabilities_per_host = {}

    for host in active_hosts:
        print(f"\nScanning vulnerabilities on {host}...")
        vulnerabilities = []
        try:
            # Example CVE to fetch details
            cve_id = "CVE-2021-23456"
            cve_details = get_cve_details(cve_id)
            vulnerabilities.extend(cve_details)
        except Exception as e:
            print(f"Error fetching CVE {cve_id}: {e}")

        vulnerabilities_per_host[host] = vulnerabilities

    generate_pdf_report(active_hosts, vulnerabilities_per_host)
    print("\nPDF report generated: detailed_vulnerability_report.pdf")
